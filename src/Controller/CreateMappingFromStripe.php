<?php

namespace App\Controller;

use App\Entity\AccountMapping;
use App\Repository\AccountMappingRepository;
use App\Repository\OnboardingAccountRepository;
use App\Repository\StripeAccountRepository;
use Psr\Log\LoggerAwareInterface;
use Psr\Log\LoggerAwareTrait;
use Stripe\Exception\ApiErrorException;
use Swagger\Annotations as SWG;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class CreateMappingFromStripe extends AbstractController implements LoggerAwareInterface
{
    use LoggerAwareTrait;

    public const ERROR_MISSING_CODE = [
        'code' => 'missing_code',
        'description' => 'Stripe provided no code',
    ];
    public const ERROR_MISSING_STATE = [
        'code' => 'missing_state',
        'description' => 'Stripe provided no state',
    ];
    public const ERROR_NO_MATCHING_STATE = [
        'code' => 'no_matching_state',
        'description' => 'Could not find matching state',
    ];
    public const ERROR_ALREADY_EXISTING_SHOP = [
        'code' => 'already_existing_shop',
        'description' => 'Mirakl shop already exists',
    ];

    /**
     * @var StripeAccountRepository
     */
    private $stripeAccountRepository;

    /**
     * @var string
     */
    private $redirectOnboarding;

    /**
     * @var AccountMappingRepository
     */
    private $accountMappingRepository;

    /**
     * @var OnboardingAccountRepository
     */
    private $onboardingAccountRepository;

    public function __construct(
        StripeAccountRepository $stripeAccountRepository,
        string $redirectOnboarding,
        AccountMappingRepository $accountMappingRepository,
        OnboardingAccountRepository $onboardingAccountRepository
    ) {
        $this->stripeAccountRepository = $stripeAccountRepository;
        $this->redirectOnboarding = $redirectOnboarding;
        $this->accountMappingRepository = $accountMappingRepository;
        $this->onboardingAccountRepository = $onboardingAccountRepository;
    }

    private function getRedirectResponse(array $error): RedirectResponse
    {
        $this->logger->error('Could not process return from Stripe', $error);

        $queryParams = \http_build_query([
            'error' => 'true',
            'error_code' => $error['code'],
            'error_description' => $error['description'],
        ]);
        $redirectOnboardingWithShop = sprintf('%s?%s', $this->redirectOnboarding, $queryParams);

        return new RedirectResponse($redirectOnboardingWithShop);
    }

    /**
     * Creates the Stripe-Mirakl mapping.
     * Should only be called via the Stripe Connect redirect URI.
     *
     * @SWG\Parameter(
     *     name="code",
     *     in="query",
     *     type="string",
     *     description="The code generated by Stripe which allows us to fetch seller info"
     * )
     * @SWG\Parameter(
     *     name="state",
     *     in="query",
     *     type="string",
     *     description="The random state generated using /api/onboarding/{miraklId} route"
     * )
     * @SWG\Response(
     *     response=302,
     *     description="Redirect to REDIRECT_ONBOARDING with extra query parameters. See <a target = '_blank' href='https://stripe.com/docs/plugins/mirakl/onboarding-sellers'>documentation</a>"
     * )
     * @SWG\Response(
     *     response=400,
     *     description="Stripe could not create the account",
     * )
     * @SWG\Response(
     *     response=404,
     *     description="The provided state does not match any known account",
     * )
     * @SWG\Response(
     *     response=409,
     *     description="Mirakl Shop ID is already linked to a Stripe Connect account",
     * )
     * @SWG\Tag(name="Internal (Stripe Only)")
     * @Route("/api/public/onboarding/create_mapping", methods={"GET"}, name="create_mapping")
     */
    public function linkShop(Request $request): Response
    {
        $code = $request->query->get('code');
        $state = $request->query->get('state');

        if (null === $code) {
            return $this->getRedirectResponse(self::ERROR_MISSING_CODE);
        }

        if (null === $state) {
            return $this->getRedirectResponse(self::ERROR_MISSING_STATE);
        }

        $onboardingAccount = $this->onboardingAccountRepository->findOneByStripeState($state);

        if (null === $onboardingAccount) {
            return $this->getRedirectResponse(self::ERROR_NO_MATCHING_STATE);
        }

        $miraklShopId = $onboardingAccount->getMiraklShopId();
        assert(null !== $miraklShopId);

        $this->onboardingAccountRepository->deleteAndFlush($onboardingAccount);
        $existingShop = $this->accountMappingRepository->findOneByMiraklShopId($miraklShopId);
        if ($existingShop) {
            return $this->getRedirectResponse(self::ERROR_ALREADY_EXISTING_SHOP);
        }

        try {
            $response = $this->stripeAccountRepository->findByCode($code);
            $stripeUserId = $response->stripe_user_id;
            $stripeAccount = $this->stripeAccountRepository->setManualPayout($stripeUserId);
        } catch (ApiErrorException $e) {
            return $this->getRedirectResponse([
                'code' => $e->getStripeCode(),
                'description' => $e->getMessage(),
            ]);
        }

        $newMapping = new AccountMapping();
        $newMapping
            ->setMiraklShopId($miraklShopId)
            ->setStripeAccountId($stripeUserId)
            ->setPayoutEnabled($stripeAccount->payouts_enabled)
            ->setDisabledReason($stripeAccount->requirements->disabled_reason)
            ->setPayinEnabled($stripeAccount->charges_enabled);
        $this->accountMappingRepository->persistAndFlush($newMapping);

        $queryParams = \http_build_query([
            'success' => 'true',
            'mirakl_shop_id' => $miraklShopId,
        ]);
        $redirectOnboardingWithShop = sprintf('%s?%s', $this->redirectOnboarding, $queryParams);

        $this->logger->info(sprintf('Redirecting Shop Owner %s to success or next step', $miraklShopId));

        return new RedirectResponse($redirectOnboardingWithShop);
    }
}
